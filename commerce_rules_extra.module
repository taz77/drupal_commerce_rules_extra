<?php

/**
 * @file
 * Main module file for Commerce Rules Extra.
 */

// Include all events, actions and conditions files.
$dir = drupal_get_path('module', 'commerce_rules_extra');
$mask = '/.*\.inc$/';
$events = file_scan_directory($dir . '/events', $mask);
$conditions = file_scan_directory($dir . '/conditions', $mask);
$actions = file_scan_directory($dir . '/actions', $mask);
foreach ($events as $item) {
  module_load_include('inc', 'commerce_rules_extra', 'includes/events' . $item->name);
}
foreach ($conditions as $item) {
  module_load_include('inc', 'commerce_rules_extra', 'includes/conditions' . $item->name);
}
foreach ($actions as $item) {
  module_load_include('inc', 'commerce_rules_extra', 'includes/actions' . $item->name);
}

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_rules_extra_entity_property_info_alter(&$info) {
  $info['commerce_order']['properties']['commerce_order_quantity'] = [
    'type' => 'integer',
    'label' => t('Total quantity'),
    'description' => t('Total quantity of the order.'),
    'getter callback' => 'commerce_rules_extra_get_quantity_property',
    'computed' => TRUE,
  ];
}

/**
 * Callback function for the Total Quantity of the Order.
 */
function commerce_rules_extra_get_quantity_property($order, array $options, $name) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  return commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types());
}

/**
 * Implements hook_theme().
 */
function commerce_rules_extra_theme($existing, $type, $theme, $path) {
  return [
    'form--cre_condition' => [
      'template' => 'form--cre_condition',
      'render element' => 'form',
      'path' => $path . '/templates',
    ],
  ];
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 *
 * Invoke all rules for process_checkout_pane event and alter panes properties returned by rules.
 */
function commerce_rules_extra_commerce_checkout_pane_info_alter(&$checkout_panes) {
  global $_commerce_rules_extra_pane_changes;
  if (!$_commerce_rules_extra_pane_changes) {
    $_commerce_rules_extra_pane_changes = [];
  }
  $urls = ['checkout', 'system'];
  drupal_alter('checkout_pane_urls', $urls);
  if (in_array(arg(0), $urls)) {
    $commerce_order = menu_get_object('commerce_order');
    if (NULL == $commerce_order) {
      $commerce_order = commerce_cart_get_properties(FALSE, [], 'current_cart_order');
    }
    rules_invoke_all('commerce_rules_extra_process_checkout_pane', $commerce_order);
    foreach ($_commerce_rules_extra_pane_changes as $pane_id => $changes) {
      $checkout_panes[$pane_id]['enabled'] = $changes['enabled'];
      if ($changes['weight'] != '') {
        $checkout_panes[$pane_id]['weight'] = $changes['weight'];
      }
      if ($changes['page_id'] != '<same>') {
        $checkout_panes[$pane_id]['page'] = $changes['page_id'];
      }
    }
  }
}
